LiNUX
to add user not as root :- user/bin/useradd/user/bin/passwd
ques.Create the following users,groups and group membership
-A group named sysadm
-A user "harry" who belongs to sysadm as a secondary group.
-A user "natasha" who belongs to sysadm as a secondary group.
-A user "sarah" who does not have the access to an interactive shell and who is not a member of sysadm group.
-"harry" "natasha"  and "sarah" should all have password of password 
SOl:-
cat /etc/group
groupadd sysadm
cat /etc/group/ -i sysadm
useradd harry
passwd harry same for natasha and sarah
usermod -G sysadm harry
usermod -G sysadm natasha
usermod -s /sbin/nologin sarah
####################################################################################################################
ques.create a collabrative directory /shared/sysadm with th following characteristics:
-Group owernship of /shared/sysadm is sysadm
-The directory should be readable , writable and accesiable to member of sysadm . but not to any other user.
-Files created in /shared/sysadm automatically have group owernshipset to the sysadm group
sol:-
mkdir -p /shared/sysadm
ll -d /shared/sysadm
chgrp sysadm /shared/sysadm
ll -d /shared/syadm
chmod 770 /shared/sysadm
ll -d /shared/syadm
chmod g+s /shared/sysadm
su -harry
cd /shared/sysadm
ll touch harry-file
##########################################################################################################################
TOMCAT-SERVER
* first 3 instances dev-server , jenkins-server , web-server , tomcat-server
dev-server = t2.micro , size = 12
jenkins-server = t2.medium , size = 8
tomcat-server = t2,micro , size = 10
ON DEV-SERVER 
sudo su -
set hostname - dev-server.example.com
bash
yum install git 
CREATE A PUBLIC REPO AND CLONE
 1  yum install git
    3  git clone git@github.com:sanjayguruji/web-repo.git
    4  git clone https://github.com/sanjayguruji/web-repo.git
    5  ssh-keygen
    6  cd .ssh/
    7  cat id_rsa.pub (add the ssh key to the github)
    8  cd
    9  cd web-repo
   10  git init
   11  git add .
   12  git commit -m devops -a
   13  git branch -M main
   14  git remote add origin git@github.com:mansi-lti/tomcat.git
   15  git remote remove origin
   16  git remote add origin git@github.com:mansi-lti/tomcat.git
   17  git push origin main
CONNECT TO JENKINS SERVER
sudo su -
hostname
bash
 wget -O /etc/yum.repos.d/jenkins.repo     https://pkg.jenkins.io/redhat-stable/jenkins.repo
    2  rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
    3  yum upgrade
    4  yum install java-17-amazon-corretto -y
    5  yum install jenkins -y
    6  systemctl enable jenkins
    7  systemctl start jenkins
    8  systemctl status jenkins
go to the browser and copy ip-address:8080 and create webhook
after sign in install plugins like maven , deploy to container , github integration then restart the jenkins
yum install maven
CONNECT TO APACHE SERVER
sudo su -
hostname = apache.example.com
bash
yum install java*
from google copy the link for tomcat 9 download select tar.gz file
 yum install wget
 wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.106/bin/apache-tomcat-9.0.106.tar.gz
 tar -xzf apache-tomcat-9.0.106.tar.gz
 ll
move to jenkins server 
mvn -v (copy the maven home path and java path and paste in the jenkins web server under tools)
next create new item and start the build if not coming install git on jenkins server
next move to apache server 
 cd  apache-tomcat-9.0.106
 cd bin
  ll
  chmod +x startup.sh
  chmod =x shutdown.sh
  chmod +x shutdown.sh
open the medium and follow the steps
after runnig the ./startup copy the ip address with port no 8080
login manager app username and pass admin 
then the configuration part and create credentials with username depolyer and pass depolyer
add container
make changes from github and check wheather the changes are reflecting or not
####################################################################################################
Docker_installation & Containers
:: yum install docker*

:: docker pull jenkins/jenkins

:: docker ps

:: systemctl start docker

:: systemctl enable docker

:: docker info

:: docker ps

:: Creating a container for jenkins
-- docker run -itd --name <Name_of_container> -p 8080:8080 jenkins/jenkins

:: docker ps -a

:: docker exec -it <container_id> /bin/bash

:: after we logged into 
-- <public ip-address>:8080
-- copy the directoryy

:: cat <paste_directory>

:: copy the password and paste it in browser login page
###################################################################################################
jenkins_on_aws
:: up to date on your instance by using
--- yum update â€“y

:: Add the Jenkins repo using the following command
--- wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo

:: Import a key file from Jenkins-CI to enable installation from the package
--- rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
--- yum upgrade

:: Install Java
--- yum install java-17-amazon-corretto -y

:: Install Jenkins
--- yum install jenkins -y

:: Enable the Jenkins service to start at boot
--- systemctl enable jenkins

:: Start Jenkins as a service
--- systemctl start jenkins


:: You can check the status of the Jenkins service using the command
--- systemctl status jenkins
#############################################################################################
GIT CLIENT1 , CLIENT2 , SERVER
first create 3 instances
sudo su -
sethostname
 hostname
 ip a s
 vim /etc/hosts
 cat /etc/hosts
  history
create a directory and do git init --bare in server and in client do git --init
in the server
cd 
make the changes in vim /etc/ssh/sshd_config
git server, client1 , client2
#########
git-server
##########
sudo su -
passwd root
yum install git
hostnamectl set-hostname git-server.example.com
bash
vim /etc/hosts
ping
vim /etc/ssh/sshd_config    (remove # for "permit root login" and change value to yes and  PasswordAuthentication ,PermitEmptyPasswords to yes)
systemctl restart sshd
systemctl start sshd
cd project
git init --bare
git log

###########
git-client1
###########
sudo su -
hostnamectl set-hostname git-client.example.com
bash
yum install git
ssh-keygen
ssh-copy-id root@172.31.35.8
vim /etc/hosts
ping
mkdir my-project
cd my-project
git init
vim index.html
git add .
git commit -m "first"
git remote add origin root@172.31.35.8:/root/project/
git push -u origin master
########################################################################################################################
AWS
1st scenario) USING HTTPD
create a instance-> web server -> t2.micro -> connect
    sudo su -
    2  yum install httpd -y
    3  cd /var/www/html/
    4  echo "this is my web server" > index.html
    5  ll
    7  cat index.html
    9  systemctl start httpd
   10  systemctl enable httpd
   11  systemctl status httpd
enable the port no 8080 and paste the public ip address in the browser for the output.
#########################################################################################################################
2nd) using the advance option 
create a instace -> my-server -> t2.micro -> in the advance give the follwing script
#!/bin/bash
yum install httpd -y
echo "this message is created during the instace creation from the advance option" >> /var/www/html/index.html
system start httpd
system enable httpd
useradd mansi -p redhat -c "user mansi created" 
copy the public ip and paste in the browser the message will the displayed 
then check in the terminal the file index.html is reflected or not
    sudo su -
 1  cd /var/www/html
    2  ll
    3  cat index.html
    4  cd
    5  tail /etc/passwd
    6  tail /etc/shadow
====================================================================================================================
3) creating custom AMI
create two instances in one instace download all the packages 
then create another instance using the custom AMI and check wheather all the packages are available in the new instance or not
 8  yum install docker *
   10  yum install vsftpd -y
   11  yum install dns*
   12  yum install nfs-utils -y
   13  yum install cifs-utils -y
   16  touch mansi.html
   17  vim mansi.html
Creting the custom ami -> Actions-> Image and AMI -> Create Image
name :- devops-practise-ami
des:
tag tag image and snapshot together -> create image
click in the AMi ctalog -> check in my AMI's
terminate the my-server instance
create new instance with the custom ami and check the packages install using
rpmquery docker , httpd, dns , cifs-utils , nfs-utils
 1  ll
    2  rpmquery docker
    3  rpmquery httpd
    4  rpmquery dns
    5  rpmquery cifs-utils
    7  rpmquery nfs-utils
    8  history
=======================================================================================================================
4) copying ami from one region to another
AMI -> copy AMI -> Destination = ohio -> copy AMI
select ohio region
create a instance in ohio region from the custom ami
create new key pair
create security group
allow port no 22 , http
launch instance
paste the public ip in the browser
terminate
======================================================================================================================
5) to share from one account to another
AMI -> provide AMI-ID of the different account -> save chages
path :- ec2 -> AMI -> ami-0000------- -> edit AMI permission
action -> copy ami -> transfer to N.Vir -> copy ami
==================================================================================================================
6) how to create AMI from snapshot
select the existing AMI snapshot-> actions -> create image from the snapshot
name :
des:
create instance 
deregister 
===============================================================================================================
7) Templates
launch template -> create template
name : 
des:
template tahs 
name : devops 
give all the details like image etc 
add the script file in the advance details 
creating a instance:- dashboard -> launch instances from template -> paste the ip in terminal
==============================================================================================================
STORAGE
ESD
1) create instance 
name: dev-server
check for the root , root name and volume id from the storage 
connect 
#sudo su -
#df -h
attach the volume: EBS-> volume-> add the "root tag" for the existing volume -> create volume 
type : gp2
size : 5
zone : us-east-1a
create volume
select the vol -> actions -> attach volume
 1  df -h
    2  lsblk
    3  lsblk -fs
    4  blkid
       mkfs press tab 2 times
    5  mkfs.ext4 /dev/xvdb
    6  blkid
    7  mkdir data
    8  mount /dev/xvdb data
    9  df -h
   10  cd data
   11  touch mansi.xt{1..10}
   12  ll
restart instance -> connect again
sudo su -
cd data 
ll (data will be goned)
for permanent mounting 
blkid -> copy the UID 
vim /etc/fstab
add the following connect 
#mydisk
UUId = copied id /data ext4 defaults 0 0
#systemctl daemon-reload
df -h 
restart the instance
connect again
sudo su -
df -h
cd data
ll
=====================================================================================================
2) data replication
create instance - test-server 
create a snapshot for the data-vol
source :- volume
name :- data-vol 
des : this is a data-vol snap -> create snapshot 
actions -> create volume from the snap , 5g , us-east-1a
attach the volume
connect to the test-server
sudo su -
lsblk
mkir test
mount /dev/xvbd test (if does not work use : mkfs.ext4 /dev/sdb)
df -h
cd test
blkid
df -h
========================================================================================
how to increase the disk space
select the new-data-vol and size = 8
df -f
blkid
lsblk
===========================================================================================
how to resize
resize2fs /dev/xvdb
df -h
cd /test
================================================================================
how to resize the root volume
from dashboard increase the size of the data-vol to 15g
lsblk
growpart /dev/xvda
growpart /dev/xvda 1
xfs_growfs -d 
df -h
reboot the test server
=========================================================================================










